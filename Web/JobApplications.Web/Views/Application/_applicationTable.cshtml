@model JobApplications.Web.Models.Applications.ApplicationIndexViewModel

<div class="row">
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th class="col-sm-3">Position</th>
                <th class="col-sm-2">Company</th>
                <th class="col-sm-2">Apllied on</th>
                <th class="col-sm-4">Notes</th>
                <th class="col-sm-1">Action</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Items.Count() > 0)
            {
                foreach (var item in Model.Items)
                {
                    <tr>
                        <td>
                            <a href="@Url.Action("Details", "Application", new { id = @item.ApplicationId })" title="Details">@item.Position</a>
                        </td>
                        <td>@item.Company</td>
                        <td>@item.ApplicationDate</td>
                        <td>@item.Notes</td>
                        <td>
                            <a href="@Url.Action("Edit", "Application", new { id = @item.ApplicationId })" title="Edit">Edit</a>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td class="text-center" colspan="5">No items</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (Model.Items.Count() > 0)
{
    <div class="row text-center">
        <nav>
            <ul class="pagination">
                <li class=@(Model.ActivePage == 0 ? "disabled" : "")>
                    <a href="#" title="First" data-page="0">&laquo;</a>
                </li>
                <li class=@(Model.ActivePage == 0 ? "disabled" : "")>
                    <a href="#" title="Previous" data-page="@(Model.ActivePage > 0 ? Model.ActivePage - 1 : 0)">&lsaquo;</a>
                </li>

                @{
                    const int PAGER_SIZE = 8;
                    int start = 0;
                    if (Model.PageCount > PAGER_SIZE)
                    {
                        start = Model.PageCount - (PAGER_SIZE / 2);
                        if (start < 0)
                        {
                            start = 0;
                        }
                        else if (start + PAGER_SIZE > Model.PageCount)
                        {
                            start = Model.PageCount - PAGER_SIZE;
                        }
                    }

                    int pageDisplayCount = Math.Min(PAGER_SIZE, Model.PageCount);
                }

                @for (int i = start, length = pageDisplayCount + start; i < length; i++)
                {
                    <li class=@(Model.ActivePage == i ? "active" : "")>
                        <a href="#" data-page="@i" title="Page @(i + 1)">@(i + 1)</a>
                    </li>
                }

                <li class=@(Model.ActivePage == Model.PageCount - 1 ? "disabled" : "")>
                    <a href="#" title="Next" data-page="@(Model.ActivePage < Model.PageCount - 1 ? Model.ActivePage + 1 : Model.PageCount - 1)">&rsaquo;</a>
                </li>
                <li class=@(Model.ActivePage == Model.PageCount - 1 ? "disabled" : "")>
                    <a href="#" title="Last" data-page="@(Model.PageCount - 1)">&raquo;</a>
                </li>
            </ul>
        </nav>
    </div>
}
